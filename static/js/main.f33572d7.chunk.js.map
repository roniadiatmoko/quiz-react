{"version":3,"sources":["logo.svg","content/HeaderContent.js","content/ContainerContent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HeaderContent","state","soal","quiz","percent","time","angka1","angka2","score","Image","centered","size","src","style","textAlign","Header","as","Progress","this","indicating","Input","action","color","labelPosition","icon","content","placeholder","Divider","Button","Icon","name","React","Component","ContainerContent","Container","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,gPCoD5BC,E,YAhDd,aAAc,IAAD,8BACZ,+CACKC,MAAQ,CACZC,KAAM,EACNC,KAAM,EACNC,QAAS,EACTC,KAAM,EACNC,OAAQ,EACRC,OAAQ,EACRC,MAAO,GATI,E,sEAcZ,OACC,6BACI,kBAACC,EAAA,EAAD,CACEC,UAAQ,EACRC,KAAK,QACLC,IAAI,iGAGN,yBAAKC,MAAO,CAACC,UAAU,WACtB,kBAACC,EAAA,EAAD,CAAQC,GAAG,MAAX,UACA,kBAACC,EAAA,EAAD,CAAUb,QAASc,KAAKjB,MAAMG,QAASe,YAAU,IACjD,kBAACJ,EAAA,EAAD,CAAQC,GAAG,MAAX,SACA,kBAACI,EAAA,EAAD,CAAOC,OAAQ,CACZC,MAAO,OACPC,cAAe,QACfC,KAAM,OACNC,QAAS,SACRC,YAAY,mBAEnB,kBAACX,EAAA,EAAD,CAAQC,GAAG,MAAX,UAAwBE,KAAKjB,MAAMO,OAEnC,6BAAK,6BAAK,6BACV,kBAACmB,EAAA,EAAD,MAEA,kBAACC,EAAA,EAAD,CAAQJ,MAAI,EAACD,cAAc,UACtB,kBAACM,EAAA,EAAD,CAAMC,KAA2B,IAApBZ,KAAKjB,MAAME,KAAa,OAAS,UACzB,IAApBe,KAAKjB,MAAME,KAAa,OAAS,e,GAzChB4B,IAAMC,WCcnBC,E,iLAXX,OACE,6BACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,Y,GALqBH,IAAMC,WCStBG,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f33572d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.12289741.svg\";","import React from 'react'\r\nimport {Header, Icon, Image, Progress, Input, Button, Divider} from 'semantic-ui-react'\r\n\r\nclass HeaderContent extends React.Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tsoal: 0,\r\n\t\t\tquiz: 0,\r\n\t\t\tpercent: 0,\r\n\t\t\ttime: 0,\r\n\t\t\tangka1: 0,\r\n\t\t\tangka2: 0,\r\n\t\t\tscore: 0,\r\n\t\t}\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t    <Image\r\n\t\t\t      centered\r\n\t\t\t      size='small'\r\n\t\t\t      src='https://www.diecoding.com/wp-content/uploads/2019/05/square.diecoding.google.bgwhite.512.png'\r\n\t\t\t    />\r\n\r\n\t\t\t    <div style={{textAlign:\"center\"}}>\r\n\t\t\t    \t<Header as='h2'>Second</Header>\r\n\t\t\t    \t<Progress percent={this.state.percent} indicating />\r\n\t\t\t\t    <Header as='h1'>2 + 1</Header>\r\n\t\t\t\t    <Input action={{\r\n\t\t\t\t\t      color: 'teal',\r\n\t\t\t\t\t      labelPosition: 'right',\r\n\t\t\t\t\t      icon: 'send',\r\n\t\t\t\t\t      content: 'Check',\r\n\t\t\t\t\t    }} placeholder='Answer Here...' />\r\n\r\n\t\t\t\t\t<Header as='h3'>Score: {this.state.score}</Header>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<br/><br/><br/>\r\n\t\t\t\t\t<Divider />\r\n\r\n\t\t\t\t\t<Button icon labelPosition='center'>\r\n\t\t\t\t      <Icon name= {this.state.quiz === 0 ? 'play' : 'pause'} />\r\n\t\t\t\t      {this.state.quiz === 0 ? 'Play' : 'Pause'}\r\n\t\t\t\t    </Button>\r\n\t\t\t    </div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default HeaderContent","import React from 'react'\r\nimport { Container } from 'semantic-ui-react'\r\nimport HeaderContent from './HeaderContent'\r\n\r\nclass ContainerContent extends React.Component{\r\n  render(){\r\n    return(\r\n      <div>\r\n        <Container>\r\n          <HeaderContent/>\r\n        </Container>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ContainerContent","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Container from './content/ContainerContent'\n\nfunction App() {\n  return (\n    <div>\n      <Container/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'semantic-ui-css/semantic.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}